webpackJsonp([53],{2488:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(2489)},2489:function(t,e,n){"use strict";var i=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),s=this&&this.__assign||function(){return(s=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++){e=arguments[n];for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])}return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var o="MonetizationService",a=function(t){function e(e,n,i,s,a,r,c,p,u,h){var l=t.call(this,r)||this;l.$rootScope=e,l.authenticationService=n,l.constants=i,l.loggingService=a,l.orchestrationService=r,l.settingsService=c,l.utilityService=p,l.monetizationDatabase=u,l.$q=h,l.logger=a.newLogger(o);var d=new teamspace.services.DataManagerOptions(i.urls.monetizationService.type,function(t){return"productsAndAssets"});return d.useTeamspaceTokens=!1,d.isTransient=!0,l.dataManager=s.registerManager(d),l.initializeOnAppLaunchAndReinit("launch"),l}return i(e,t),e.$inject=["$rootScope","authenticationService","constants","dataManagerService","loggingService","orchestrationService","settingsService","utilityService","monetizationDatabase","$q"],e.prototype.initializeOnAppLaunchAndReinit=function(t){this.logger.info("initializeOnAppLaunchAndReinit monetizationService: reason = {0}",t)},e.prototype.cleanupOnAppTeardown=function(t){this.logger.info("cleanupOnAppTeardown monetizationService: reason = {0}",t)},e.prototype.mtmaTelemetryIdentifier=function(){return o},e.prototype.getJarvisAccessToken=function(){var t=this.settingsService.valueFor(this.constants.settings.names.monetizationConstants);return this.authenticationService.getAuthToken(t.jarvisResourceUri).then(function(t){return t.token})},e.prototype.getHAPIAccessToken=function(){var t=this.settingsService.valueFor(this.constants.settings.names.monetizationConstants);return this.authenticationService.getAuthToken(t.hapiResourceUri).then(function(t){return t.token})},e.prototype.getPaymentAccessToken=function(){var t=this.settingsService.valueFor(this.constants.settings.names.monetizationConstants);return this.authenticationService.getAuthToken(t.paymentResourceUri).then(function(t){return t.token})},e.prototype.getSaaSState=function(t){var e=this,n=this.loggingService.newScenario(this.constants.scenarios.extensibility.monetization.apis.saaSState);if(!this.settingsService.valueAsBoolean(this.constants.settings.names.enableMonetization))return n.fail({error2:"monetization feature flag is not enabled"}),Promise.resolve(null);var i=this.settingsService.valueFor(this.constants.settings.names.monetizationConstants);return this.generateDataManagerRequestOptions(i,n).then(function(n){var s={url:""+e.utilityService.combineUriComponents(i.endpointUri,i.assetSaaSStatePath,t),method:"GET",timeout:i.productAndAssetDetailsHttpTimeoutSeconds*e.constants.timeInMiliseconds.second,skipCommonHeaders:!0};return e.dataManager.invoke(s,n)}).then(function(t){if(!t)throw"empty response from SaaSState API";return n.appendEventData({configUrl:t.setupUrlWithToken}),n.stop(),t}).catch(function(t){var e=JSON.stringify(teamspace.services.AppsServiceUtils.getSafeError(t));return n.fail({error:e,error2:e}),Promise.resolve(null)})},e.prototype.getProductsAndAssets=function(){var t=this,e=this.loggingService.newScenario(this.constants.scenarios.extensibility.monetization.cache.productsAndAssets);if(!this.settingsService.valueAsBoolean(this.constants.settings.names.enableMonetization))return e.fail({error2:"monetization feature flag is not enabled"}),Promise.resolve(null);var n=this.settingsService.valueFor(this.constants.settings.names.monetizationConstants);return this.getMonetizationAppsListCache(n).then(function(i){return i?(e.appendEventData(s(s({},t.getMonetizationAppsListEventData(i)),{source:t.constants.scenarios.extensibility.monetization.cache.productsAndAssets})),e.stop(),i):t.getProductAndAssetFromAPI(n).then(function(n){if(!n)throw"empty response from ProductsAndAssets API";return e.appendEventData(s(s({},t.getMonetizationAppsListEventData(n)),{source:t.constants.scenarios.extensibility.monetization.apis.productsAndAssets})),e.stop(),n})}).catch(function(t){var n=JSON.stringify(teamspace.services.AppsServiceUtils.getSafeError(t));return e.fail({error:n,error2:n}),Promise.resolve(null)})},e.prototype.getProductAndAssetFromAPI=function(t){var e=this,n=this.loggingService.newScenario(this.constants.scenarios.extensibility.monetization.apis.productsAndAssets);return this.generateDataManagerRequestOptions(t,n).then(function(n){var i={url:""+e.utilityService.combineUriComponents(t.endpointUri,t.productsAndAssetsPath),method:"GET",timeout:t.productsAndAssetsHttpTimeoutSeconds*e.constants.timeInMiliseconds.second,skipCommonHeaders:!0};return e.dataManager.invoke(i,n)}).then(function(t){if(!t)throw"empty response from ProductsAndAssets";return n.stop(),e.putMonetizationAppsListCache(t),t}).catch(function(t){var e=JSON.stringify(teamspace.services.AppsServiceUtils.getSafeError(t));return n.fail({error:e,error2:e}),Promise.resolve(null)})},e.prototype.getProductAndAssetDetails=function(t){var e=this,n=this.loggingService.newScenario(this.constants.scenarios.extensibility.monetization.cache.productAndAssetDetails);if(!this.settingsService.valueAsBoolean(this.constants.settings.names.enableMonetization))return n.fail({error2:"monetization feature flag is not enabled"}),Promise.resolve(null);var i=this.settingsService.valueFor(this.constants.settings.names.monetizationConstants);return this.getSubscriptionPlanCache(t,i).then(function(o){return o?(n.appendEventData(s(s({},e.getMonetizationPlansEventData(o)),{source:e.constants.scenarios.extensibility.monetization.cache.productAndAssetDetails})),n.stop(),o):e.getMonetizationAppsListCache(i).then(function(o){return o&&o.length>0?o.some(function(e){return e.officeProductId==t})?e.getProductAndAssetDetailsFromAPI(t,i).then(function(t){if(!t)throw"empty response from ProductsAndAssetsDetails API";return n.appendEventData(s(s({},e.getMonetizationPlansEventData(t)),{source:e.constants.scenarios.extensibility.monetization.apis.productAndAssetDetails})),n.stop(),t}):(n.stop(),null):e.getProductAndAssetDetailsFromAPI(t,i).then(function(t){if(!t)throw"empty response from ProductsAndAssetsDetails API";return n.appendEventData(s(s({},e.getMonetizationPlansEventData(t)),{source:e.constants.scenarios.extensibility.monetization.apis.productAndAssetDetails})),n.stop(),t})}).catch(function(s){var o=JSON.stringify(teamspace.services.AppsServiceUtils.getSafeError(s));return n.fail({error:o,error2:o}),e.getProductAndAssetDetailsFromAPI(t,i)})}).catch(function(t){var e=JSON.stringify(teamspace.services.AppsServiceUtils.getSafeError(t));return n.fail({error:e,error2:e}),Promise.resolve(null)})},e.prototype.getProductAndAssetDetailsFromAPI=function(t,e){var n=this,i=this.loggingService.newScenario(this.constants.scenarios.extensibility.monetization.apis.productAndAssetDetails);return this.generateDataManagerRequestOptions(e,i).then(function(i){var s={url:""+n.utilityService.combineUriComponents(e.endpointUri,e.productsAndAssetsPath,t),method:"GET",timeout:e.productAndAssetDetailsHttpTimeoutSeconds*n.constants.timeInMiliseconds.second,skipCommonHeaders:!0};return n.dataManager.invoke(s,i)}).then(function(t){if(!t)throw"empty response from ProductAndAssetDetails";return i.appendEventData(s({},n.getMonetizationPlansEventData(t))),i.stop(),n.putSubscriptionPlanCache(t),t}).catch(function(t){var e=JSON.stringify(teamspace.services.AppsServiceUtils.getSafeError(t));return i.fail({error:e,error2:e}),Promise.resolve(null)})},e.prototype.generateDataManagerRequestOptions=function(t,e){var n=t.resourceUri;return this.authenticationService.getAuthToken(n).then(function(t){var n=new teamspace.services.DataManagerRequestOptions;return n.skipApply=!0,n.scenario=e,n.additionalHeaders={Authorization:"Bearer "+t.token},n})},e.prototype.open=function(){return this.isOpen?SkypeX.Services.SyncTasks.Resolved():this.monetizationDatabase.open()},Object.defineProperty(e.prototype,"isOpen",{get:function(){return this.monetizationDatabase.isOpen},enumerable:!0,configurable:!0}),e.prototype.getHashCode=function(t){if(t)return this.utilityService.djb2_hash(JSON.stringify(t))},e.prototype.validateCacheDataIntegrity=function(t,e){return!(!t||!e)&&e===this.getHashCode(t)},e.prototype.isCacheExpired=function(t,e){return!t||Math.abs((new Date).getTime()-t.getTime())>e*this.constants.timeInMiliseconds.second},e.prototype.getSubscriptionPlanCache=function(t,e){var n=this,i=this.loggingService.newScenario(this.constants.scenarios.extensibility.monetization.cache.getSubscriptionPlansIndexedDB);return this.open().then(function(){return i.appendEventData({event:n.constants.scenarios.extensibility.monetization.cache.openConnection}),n.monetizationDatabase.provider.openTransaction(n.monetizationDatabase.schema.stores.app_subscription_plans.name,!1,"monetizationClientCache:getCachedSubscriptionPlan")}).then(function(e){return i.appendEventData({event:n.constants.scenarios.extensibility.monetization.cache.openTransaction}),e.store.get(t)}).then(function(o){return o&&n.validateCacheDataIntegrity(o.subscriptionPlans,o.hash)?(n.isCacheExpired(o.insertedDate,e.maxProductsAssetsAgeSeconds)&&n.refreshMonetizationCache(t),i.stop(s({},n.getMonetizationPlansEventData(o.subscriptionPlans))),o.subscriptionPlans):(i.fail({error:"Hash check mismatch"}),null)}).toNgPromise(this.$q).catch(function(e){var s=JSON.stringify(teamspace.services.AppsServiceUtils.getSafeError(e));return n.logger.error("Failed to get monetization subscription plans from IndexedDB for app "+t+". Error: "+s),i.fail({error:s,error2:s}),null})},e.prototype.putSubscriptionPlanCache=function(t){var e=this,n=new Date,i={appId:t.officeProductId,insertedDate:n,subscriptionPlans:t,hash:this.getHashCode(t)},s=this.loggingService.newScenario(this.constants.scenarios.extensibility.monetization.cache.setSubscriptionPlansIndexedDB);return this.open().then(function(){return e.clearAppSubscriptionPlansCache(t.officeProductId,s)}).then(function(){return s.appendEventData({event:e.constants.scenarios.extensibility.monetization.cache.clearSubscriptionPlans,step:"putSubscriptionPlanCache"}),e.monetizationDatabase.provider.openTransaction(e.monetizationDatabase.schema.stores.app_subscription_plans.name,!0,"monetizationClientCache:setCachedSubscriptionPlan")}).then(function(t){return s.appendEventData({event:e.constants.scenarios.extensibility.monetization.cache.openTransaction,step:"putSubscriptionPlanCache"}),t.store.put(i)}).then(function(){s.stop({message:"Saved new Subscription plans API response to IndexedDB"})}).catch(function(n){var i=JSON.stringify(n);return e.logger.error("Failed to set subscription plans for "+t.officeProductId+" to IndexedDB. Error: "+i),s.fail({error:i,error2:i}),SkypeX.Services.SyncTasks.Rejected(i)})},e.prototype.clearAppSubscriptionPlansCache=function(t,e){var n=this;return this.open().then(function(){return e.appendEventData({event:n.constants.scenarios.extensibility.monetization.cache.openConnection,step:"clearAppSubscriptionPlansCache"}),n.monetizationDatabase.provider.openTransaction(n.monetizationDatabase.schema.stores.app_subscription_plans.name,!0,"monetizationClientCache:clearCachedMonetizationApps")}).then(function(i){return e.appendEventData({event:n.constants.scenarios.extensibility.monetization.cache.openTransaction,step:"clearAppSubscriptionPlansCache"}),SkypeX.Services.SyncTasks.whenAll([i.store.remove(t)])}).catch(function(i){var s=JSON.stringify(i);return n.logger.error("Failed to clear subscription plans for "+t+" to IndexedDB. Error: "+s),e.fail({error:s,error2:s}),SkypeX.Services.SyncTasks.Rejected(i)})},e.prototype.getMonetizationAppsListCache=function(t){var e=this,n=this.loggingService.newScenario(this.constants.scenarios.extensibility.monetization.cache.getMonetizationAppsListIndexedDB);return this.open().then(function(){return n.appendEventData({event:e.constants.scenarios.extensibility.monetization.cache.openConnection}),e.monetizationDatabase.provider.openTransaction(e.monetizationDatabase.schema.stores.monetization_apps_list.name,!1,"monetizationClientCache:getCachedMonetizationApps")}).then(function(t){return n.appendEventData({event:e.constants.scenarios.extensibility.monetization.cache.openTransaction}),t.store.openPrimaryKey().getAll()}).then(function(i){if(i&&i.length>0){var o=i[0];return o?o&&e.validateCacheDataIntegrity(o.appsWithSubscriptionPlans,o.hash)?(e.isCacheExpired(o.insertedDate,t.maxProductsAssetsAgeSeconds)&&e.refreshMonetizationCache(),n.stop(s({},e.getMonetizationAppsListEventData(o.appsWithSubscriptionPlans))),o.appsWithSubscriptionPlans):(n.fail({error:"Hash check mismatch",error2:"Hash check mismatch"}),null):(n.stop({message:"No monetization apps list found in IndexedDB."}),null)}}).toNgPromise(this.$q).catch(function(t){var i=JSON.stringify(t);return e.logger.error("Failed to get monetization apps list from IndexedDb. Error: {0}",i),n.fail({error:i,error2:i}),null})},e.prototype.putMonetizationAppsListCache=function(t){var e=this,n=new Date,i={hash:this.getHashCode(t),insertedDate:n,appsWithSubscriptionPlans:t},s=this.loggingService.newScenario(this.constants.scenarios.extensibility.monetization.cache.setMonetizationAppsListIndexedDB);return this.open().then(function(){return e.clearMonetizationAppsListCache(s)}).then(function(){return s.appendEventData({event:e.constants.scenarios.extensibility.monetization.cache.clearMonetizationAppsList,step:"putMonetizationAppsListCache"}),e.monetizationDatabase.provider.openTransaction(e.monetizationDatabase.schema.stores.monetization_apps_list.name,!0,"monetizationClientCache:setCachedMonetizationApps")}).then(function(t){return s.appendEventData({event:e.constants.scenarios.extensibility.monetization.cache.openTransaction,step:"putMonetizationAppsListCache"}),t.store.put(i)}).then(function(){s.stop({message:"Saved new monetization apps list API response to IndexedDB"})}).catch(function(t){var n=JSON.stringify(t);return e.logger.error("Failed to set monetization apps list to IndexedDB. Error: "+n),s.fail({error:n,error2:n}),SkypeX.Services.SyncTasks.Rejected(n)})},e.prototype.clearMonetizationAppsListCache=function(t){var e=this;return this.open().then(function(){return t.appendEventData({event:e.constants.scenarios.extensibility.monetization.cache.openConnection,step:"clearMonetizationAppsListCache"}),e.monetizationDatabase.provider.openTransaction(e.monetizationDatabase.schema.stores.monetization_apps_list.name,!0,"monetizationClientCache:clearCachedMonetizationApps")}).then(function(n){return t.appendEventData({event:e.constants.scenarios.extensibility.monetization.cache.openTransaction,step:"clearMonetizationAppsListCache"}),SkypeX.Services.SyncTasks.whenAll([n.store.clearAllData()])}).catch(function(n){var i=JSON.stringify(n);return e.logger.error("Failed to clear cached monetization apps list from IndexedDB. Error: {0}",i),t.fail({error:i,error2:i}),SkypeX.Services.SyncTasks.Rejected(n)})},e.prototype.refreshMonetizationCache=function(t){var e=this,n=this.settingsService.valueFor(this.constants.settings.names.monetizationConstants);return this.getProductAndAssetFromAPI(n).then(function(){if(t)return e.getProductAndAssetDetailsFromAPI(t,n)})},e.prototype.getMonetizationAppsListEventData=function(t){var e=this;if(t){var n=[];return t.forEach(function(t){n.push(e.getMonetizationPlansEventData(t))}),n}},e.prototype.getMonetizationPlansEventData=function(t){if(t)return{productId:t.officeProductId,name:t.officeProductName,numberofPlans:t.associatedSaaSProducts?t.associatedSaaSProducts.length:0,isPurchased:!!(t.associatedSaaSProducts&&t.associatedSaaSProducts.length>0)&&t.associatedSaaSProducts.some(function(t){return t.hasPurchased})}},e}(teamspace.services.MTMABase);e.MonetizationService=a,angular.module("teamspace.monetizationService",["skypeX.myUserPreferencesStore","teamspace.appState","teamspace.authenticationService","teamspace.constants","teamspace.dataManagerService","teamspace.localizationService","teamspace.loggingService","teamspace.orchestrationService","teamspace.settingsService","teamspace.utilityService","skypeX.clientDatabase"]).service("monetizationService",a)}},[2488]);